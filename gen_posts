#!/usr/bin/env python

import glob
import os
import pandas as pd
import numpy as np
import time

class Course:
    def __init__(self, subject, num, term, audit, name, other):
        self.subject = subject
        self.num = num
        self.term = term
        # by default, the blog date is the start of that month
        self.year = int(str(term)[:3]) + 1900
        self.month = int(str(term)[-1:])
        self.day = 1
        self.audit = audit
        self.name = name
        self.other = other

    def get_date(self):
        return str(self.year) + '-' + str(self.month).zfill(2) + '-' + str(self.day).zfill(2)

    def get_course_name(self, space=True):
        if space: return str(self.subject.upper()) + ' ' + str(self.num)
        return str(self.subject.upper()) + str(self.num)

    def file_name(self):
        return str(self.subject.lower()) + str(self.num)


def term_to_str(term, season=False):
    year = int(str(term)[:3]) + 1900
    month = int(str(term)[-1:])
    if month == 1: result = 'Winter '
    elif month == 5: result = 'Spring '
    else: result = 'Fall '
    if season:
        return result.lower().strip()
    return result + str(year)

def get_sub(path):
    return os.path.splitext(os.path.basename(path))[0]

###############################################################################################

courses = []

df = pd.read_csv('courses.csv',
                names=["subject","cournum","term","audit","name", "other"],
                delimiter=",")
# now audit means: true => tex, false => md
for index, row in df.iterrows():
    courses.append(Course(row['subject'], row['cournum'],
                    row['term'], row['audit'], row['name'], row['other']))


terms = df['term'].unique()
subjects = set(list(df['subject']) + list(map(get_sub, glob.glob('back_pic/*'))))

not_overwrite_term = True
old_terms = glob.glob('_term/*.md')


for term in terms:
    term_filename = '_term/' + str(term) + '.md'
    if not_overwrite_term and (term_filename in old_terms):
        continue
    f = open(term_filename, 'w')
    write_str = """---\nterm: {}
title: {}
feature_text: |
    <h2 style="background: rgb(0, 0, 0); background: rgba(0, 0, 0, 0.5); color: #FDD54F; padding: 10px;">{}</h2>
feature_image: "/back_pic/{}.jpg"
---
""".format(term, term_to_str(term), term_to_str(term), term_to_str(term, True))
    f.write(write_str)
    f.close()

not_overwrite_sub = True
old_subs = glob.glob('_subject/*.md')


for subject in subjects:
    if subject == 'fall' or subject == 'winter' or subject == 'spring':
        continue
    subject_filename = '_subject/' + subject + '.md'
    if not_overwrite_sub and (subject_filename in old_subs):
        continue
    f = open(subject_filename, 'w')
    write_str = """---\nsubject: {}
title: {}
feature_text: |
    <h2 style="background: rgb(0, 0, 0); background: rgba(0, 0, 0, 0.5); color: #f1f1f1; padding: 10px;">{}</h2>
feature_image: "/back_pic/{}.jpg"
redirect_from:
    - /{}
    - /{}/
    - /{}
    - /{}/
---
""".format(subject, subject.upper(), subject.upper(), subject, subject, subject, subject.upper(), subject.upper())
    f.write(write_str)
    f.close()




old_posts = glob.glob('_posts/*.md')

not_overwrite = True

i = 1

for c in courses:
    course_filename = '_posts/' + c.get_date() + '-' + c.get_course_name(space=False) + ".md"
    if not_overwrite and (course_filename in old_posts):
        continue
    f = open(course_filename, 'w')
    notess = ""
    if c.audit:
        notess = "latex: /pdfs/{}/{}.pdf".format(c.term, c.file_name())
    else:
        notess = "md: /md/{}/{}/".format(c.term, c.file_name())
    write_str = """---\nlayout: post
title: {}
term: {}
subject: {}
hide: {}
{}
redirect_from:
    - /{}/{}
    - /{}/{}/
    - /{}/{}
    - /{}/{}/
feature_image: "https://picsum.photos/2560/600?image=875"
feature_text: |
    <h2 style="color:white;"> {} </h2>
---
""".format(c.get_course_name(), c.term, c.subject, "true", notess
            c.subject, str(c.num), c.subject, str(c.num), c.subject.upper(), str(c.num), c.subject.upper(), str(c.num),
            c.name) # by default, hide the audit courses
    if not (c.other == 'me'):
        write_str = write_str + "\n > These notes are contributed by one of my friends: {}.\n".format(c.other)
    else:
        if c.audit:
            pass # write_str = write_str + "\n > I was auditing this course during this term.\n"

    #write_str = write_str + "\n Partial notes coming soon. \n"
    write_str = write_str # + "\n[LaTeX notes](/pdfs/{}/{}.pdf)  [markdown notes](/md/{}/{}/)\n".format(c.term, c.file_name(), c.term, c.file_name())
    f.write(write_str)
    f.close()
    print(i, ', NEW: ', c.get_course_name())
    i = i + 1

if i == 1:
    print('\033[93m--- No courses generated ---\033[0m')
    time.sleep(3)
# Partial notes coming soon
